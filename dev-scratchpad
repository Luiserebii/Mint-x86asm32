string.h
  [SUCCESS] strlen() returns num
  [SUCCESS] strlen() returns num 
  [FAIL] strlen() returns num: Expected true, found false ("[NUM]")
  [FAIL] isbool() returns true: Expected false, found true ("[NUM]")
  [FAIL] sums are equal: Expected "[NUM]", found "[NUM]"
  [FAIL] sums are equal: Expected "01010", found "01111"
  [FAIL] sums are equal: Expected "0[NUM]", found "0[NUM]"
  [FAIL] sums are equal: Expected "0x[NUM]", found "0x[NUM]"
  [FAIL] intarrays are equal: Expected "0x[NUM]" on [N]th byte, found "0x[NUM]"
  [FAIL] strings are equal: Expected "[STR]", found "[STR]"

[FAIL] 8 tests failing with 2 tests passing.
[SUCCESS] All tests ([NUM]) passing with no tests failing.


Functions:
===========
test_assert(int32_t cond, char* title)
test_assert_true(int32_t cond, char* title)
test_assert_false(int32_t cond, char* title)

test_assert_equal(int32_t val, int32_t exp, char* title) [default to 32-bit]
test_assert_equal_int(int32_t val, int32_t exp, char* title) [default to 32-bit]
test_assert_equal_uint(int32_t val, int32_t exp, char* title) [default to 32-bit]
test_assert_equal_bin(int32_t val, int32_t exp, char* title) [default to 32-bit]
test_assert_equal_oct(int32_t val, int32_t exp, char* title) [default to 32-bit]
test_assert_equal_hex(int32_t val, int32_t exp, char* title) [default to 32-bit]
^ These all compare 32-bit values, but the printing of expected/found values differ

//Perhaps don't implement the below 3 for now, maybe _int32 and macro_int and reg equal
test_assert_equal_int8(int8_t val, int8_t exp, char* title)
test_assert_equal_int16(int16_t val, int16_t exp, char* title)
test_assert_equal_int32(int32_t val, int32_t exp, char* title)

//Heads through each pointer and compares each byte (int8_t)
test_assert_equal_memory(void* ptr, void* exp, int32_t el, char* title)
test_assert_equal_string(char* s, char* exp, char* title)
test_assert_equal_string_len(char* s, char* exp, int32_t len, char* title)

Implement naively as functions first, then try making macro afterwards


